(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{65:function(e,t,o){"use strict";o.r(t),o.d(t,"frontMatter",(function(){return l})),o.d(t,"metadata",(function(){return s})),o.d(t,"rightToc",(function(){return b})),o.d(t,"default",(function(){return p}));var n=o(2),a=o(6),i=(o(0),o(78)),c=o(86),r=o(87),l={title:"API"},s={unversionedId:"api",id:"api",isDocsHomePage:!1,title:"API",description:"What kind of emoji database would this be without a few helper functions for easily using and",source:"@site/docs/api.mdx",slug:"/api",permalink:"/docs/api",editUrl:"https://github.com/milesj/emojibase/edit/master/website/docs/api.mdx",version:"current",sidebar:"docs",previous:{title:"Emoticons",permalink:"/docs/emoticons"},next:{title:"Translations",permalink:"/docs/translations"}},b=[{value:"<code>fetchFromCDN</code>",id:"fetchfromcdn",children:[{value:"Options",id:"options",children:[]}]},{value:"<code>fetchEmojis</code>",id:"fetchemojis",children:[{value:"Options",id:"options-1",children:[]}]},{value:"<code>fetchMetadata</code>",id:"fetchmetadata",children:[{value:"Options",id:"options-2",children:[]}]},{value:"<code>fetchShortcodes</code>",id:"fetchshortcodes",children:[{value:"Options",id:"options-3",children:[]}]},{value:"<code>flattenEmojiData</code>",id:"flattenemojidata",children:[]},{value:"<code>fromCodepointToUnicode</code>",id:"fromcodepointtounicode",children:[]},{value:"<code>fromHexcodeToCodepoint</code>",id:"fromhexcodetocodepoint",children:[]},{value:"<code>fromUnicodeToHexcode</code>",id:"fromunicodetohexcode",children:[]},{value:"<code>generateEmoticonPermutations</code>",id:"generateemoticonpermutations",children:[]},{value:"<code>joinShortcodesToEmoji</code>",id:"joinshortcodestoemoji",children:[]},{value:"<code>joinShortcodes</code>",id:"joinshortcodes",children:[]},{value:"<code>stripHexcode</code>",id:"striphexcode",children:[]}],d={rightToc:b};function p(e){var t=e.components,o=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},d,o,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"What kind of emoji database would this be without a few helper functions for easily using and\nworking with emoji characters? A bad one, and thus, a handful of functions can be found in the\n",Object(i.b)("inlineCode",{parentName:"p"},"emojibase")," package."),Object(i.b)(c.a,{groupId:"package-manager",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"NPM",value:"npm"}],mdxType:"Tabs"},Object(i.b)(r.a,{value:"yarn",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"yarn add emojibase\n"))),Object(i.b)(r.a,{value:"npm",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"npm install emojibase\n")))),Object(i.b)("h2",{id:"fetchfromcdn"},Object(i.b)("inlineCode",{parentName:"h2"},"fetchFromCDN")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"fetchFromCDN<T",">","(path: string, options?: FetchFromCDNOptions): Promise<T",">")),Object(i.b)("p",null,"This function will fetch ",Object(i.b)("inlineCode",{parentName:"p"},"emojibase-data")," JSON files from our ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://cdn.jsdelivr.net/npm/emojibase-data@latest/"}),"CDN"),", parse them, and return the\nresponse. It requires a file path relative to the ",Object(i.b)("inlineCode",{parentName:"p"},"emojibase-data")," package as the 1st argument and\nan optional object of options as the 2rd argument."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"import { fetchFromCDN } from 'emojibase';\n\nawait fetchFromCDN('ja/compact.json', { version: '2.1.3' });\n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Only JSON datasets can be fetched from the CDN.")),Object(i.b)("h3",{id:"options"},"Options"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"local")," (",Object(i.b)("inlineCode",{parentName:"li"},"boolean"),") - Cache the response in local storage instead of session storage. Defaults to\n",Object(i.b)("inlineCode",{parentName:"li"},"false"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"version")," (",Object(i.b)("inlineCode",{parentName:"li"},"string"),") - The release version to fetch. Defaults to ",Object(i.b)("inlineCode",{parentName:"li"},"latest"),"."),Object(i.b)("li",{parentName:"ul"},"All options supported by ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/Request"}),"fetch"),".")),Object(i.b)("h2",{id:"fetchemojis"},Object(i.b)("inlineCode",{parentName:"h2"},"fetchEmojis")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"fetchEmojis(locale: Locale, options?: FetchEmojisOptions): Promise<Emoji[]",">")),Object(i.b)("p",null,"Fetches and returns a localized list of emojis (and optional shortcodes) from our ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://cdn.jsdelivr.net/npm/emojibase-data@latest/"}),"CDN"),". Uses\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"#fetchfromcdn"}),Object(i.b)("inlineCode",{parentName:"a"},"fetchFromCDN"))," and ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"#fetchshortcodes"}),Object(i.b)("inlineCode",{parentName:"a"},"fetchShortcodes"))," under the hood."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"import { fetchEmojis } from 'emojibase';\n\nawait fetchEmojis('ja', {\n  compact: true,\n  shortcodes: ['cldr'],\n  version: '2.1.3',\n});\n")),Object(i.b)("p",null,"It's also possible to load shortcodes from other languages by prefixing the shortcode preset with\nthe chosen locale. This is useful if you want to support English and Japanese in parallel, for\nexample."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"await fetchEmojis('ja', {\n  shortcodes: ['cldr', 'en/cldr'],\n});\n")),Object(i.b)("h3",{id:"options-1"},"Options"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"compact")," (",Object(i.b)("inlineCode",{parentName:"li"},"boolean"),") - Load the compact dataset instead of the full dataset. Defaults to ",Object(i.b)("inlineCode",{parentName:"li"},"false"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"flat")," (",Object(i.b)("inlineCode",{parentName:"li"},"boolean"),") - Flatten the dataset (moving skin tones to the root). Defaults to ",Object(i.b)("inlineCode",{parentName:"li"},"false"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"shortcodes")," (",Object(i.b)("inlineCode",{parentName:"li"},"string[]"),") - List of shortcode ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/shortcodes#presets"}),"presets")," to load and merge into the emojis\ndataset. Defaults to an empty list."),Object(i.b)("li",{parentName:"ul"},"All options supported by ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#fetchfromcdn"}),Object(i.b)("inlineCode",{parentName:"a"},"fetchFromCDN")),".")),Object(i.b)("h2",{id:"fetchmetadata"},Object(i.b)("inlineCode",{parentName:"h2"},"fetchMetadata")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"fetchMetadata(locale: Locale options?: FetchFromCDNOptions): Promise<MetadataDataset",">")),Object(i.b)("p",null,"Fetches and returns localized messages for emoji related information like groups and sub-groups.\nUses ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"#fetchfromcdn"}),Object(i.b)("inlineCode",{parentName:"a"},"fetchFromCDN"))," under the hood."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"import { fetchMetadata } from 'emojibase';\n\nawait fetchMetadata('zh', { version: '2.1.3' });\n")),Object(i.b)("h3",{id:"options-2"},"Options"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"All options supported by ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#fetchfromcdn"}),Object(i.b)("inlineCode",{parentName:"a"},"fetchFromCDN")),".")),Object(i.b)("h2",{id:"fetchshortcodes"},Object(i.b)("inlineCode",{parentName:"h2"},"fetchShortcodes")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"fetchShortcodes(locale: Locale, preset: ShortcodePreset, options?: FetchFromCDNOptions):\nPromise<ShortcodesDataset",">")),Object(i.b)("p",null,"Fetches and returns localized shortcodes for the defined ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/shortcodes#presets"}),"preset")," from our ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://cdn.jsdelivr.net/npm/emojibase-data@latest/"}),"CDN"),". The\nresponse is a mapping of emoji hexcodes to shortcodes (either a string or array of strings). Uses\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"#fetchfromcdn"}),Object(i.b)("inlineCode",{parentName:"a"},"fetchFromCDN"))," under the hood."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"import { fetchShortcodes } from 'emojibase';\n\nawait fetchShortcodes('ja', 'cldr', { version: '2.1.3' });\n")),Object(i.b)("h3",{id:"options-3"},"Options"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"All options supported by ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#fetchfromcdn"}),Object(i.b)("inlineCode",{parentName:"a"},"fetchFromCDN")),".")),Object(i.b)("h2",{id:"flattenemojidata"},Object(i.b)("inlineCode",{parentName:"h2"},"flattenEmojiData")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"flattenEmojiData(data: Emoji[], shortcodeDatasets?: ShortcodesDataset[]): Emoji[]")),Object(i.b)("p",null,"By default, emoji ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/datasets#data-structure"}),"skin modifications are nested")," under the base\nneutral skin tone emoji. To flatten the data into a single dimension array, use the\n",Object(i.b)("inlineCode",{parentName:"p"},"flattenEmojiData")," function."),Object(i.b)("p",null,"If ",Object(i.b)("inlineCode",{parentName:"p"},"shortcodeDatasets")," is defined, it will join the shortcodes to the emoji object using\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"#joinshortcodestoemoji"}),Object(i.b)("inlineCode",{parentName:"a"},"joinShortcodesToEmoji")),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"import { flattenEmojiData } from 'emojibase';\n\nflattenEmojiData([\n  {\n    hexcode: '1F3CB-FE0F-200D-2642-FE0F',\n    // ...\n    skins: [\n      {\n        hexcode: '1F3CB-1F3FB-200D-2642-FE0F',\n        // ...\n      },\n      // ...\n    ],\n  },\n]);\n\n/*\n[\n  {\n    hexcode: '1F3CB-FE0F-200D-2642-FE0F',\n    // ...\n  },\n  {\n    hexcode: '1F3CB-1F3FB-200D-2642-FE0F',\n    // ...\n  },\n]\n*/\n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Tags from the parent emoji will be passed down to the skin modifications.")),Object(i.b)("h2",{id:"fromcodepointtounicode"},Object(i.b)("inlineCode",{parentName:"h2"},"fromCodepointToUnicode")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"fromCodepointToUnicode(codepoint: CodePoint[]): Unicode")),Object(i.b)("p",null,"This function will convert an array of numerical codepoints to a literal emoji Unicode character."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"import { fromCodepointToUnicode } from 'emojibase';\n\nfromCodepointToUnicode([128104, 8205, 128105, 8205, 128103, 8205, 128102]); // \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66\n")),Object(i.b)("h2",{id:"fromhexcodetocodepoint"},Object(i.b)("inlineCode",{parentName:"h2"},"fromHexcodeToCodepoint")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"fromHexcodeToCodepoint(code: Hexcode, joiner?: string): CodePoint[]")),Object(i.b)("p",null,"This function will convert a hexadecimal codepoint to an array of numerical codepoints. By default,\nit will split the hexcode using a dash, but can be customized with the 2nd argument."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"import { fromHexcodeToCodepoint } from 'emojibase';\n\nfromHexcodeToCodepoint('270A-1F3FC'); // [9994, 127996]\nfromHexcodeToCodepoint('270A 1F3FC', ' '); // [9994, 127996]\n")),Object(i.b)("h2",{id:"fromunicodetohexcode"},Object(i.b)("inlineCode",{parentName:"h2"},"fromUnicodeToHexcode")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"fromUnicodeToHexcode(unicode: Unicode, strip?: boolean): Hexcode")),Object(i.b)("p",null,"This function will convert a literal emoji Unicode character into a dash separated hexadecimal\ncodepoint. Unless ",Object(i.b)("inlineCode",{parentName:"p"},"false")," is passed as the 2nd argument, zero width joiner's and variation selectors\nare removed."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"import { fromUnicodeToHexcode } from 'emojibase';\n\nfromUnicodeToHexcode('\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66'); // 1F468-1F469-1F467-1F466\nfromUnicodeToHexcode('\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66', false); // 1F468-200D-1F469-200D-1F467-200D-1F466\n")),Object(i.b)("h2",{id:"generateemoticonpermutations"},Object(i.b)("inlineCode",{parentName:"h2"},"generateEmoticonPermutations")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"generateEmoticonPermutations(emoticon: Emoticon, options?: PermutationOptions): Emoticon[]")),Object(i.b)("p",null,"This function will generate multiple permutations of a base emoticon character. The following\npermutations will occur:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},")")," mouth will be replaced with ",Object(i.b)("inlineCode",{parentName:"li"},"]")," and ",Object(i.b)("inlineCode",{parentName:"li"},"}"),". The same applies to sad/frowning mouths."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"/")," mouth will be replaced with ",Object(i.b)("inlineCode",{parentName:"li"},"\\"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},":")," eyes will be replaced with ",Object(i.b)("inlineCode",{parentName:"li"},"="),"."),Object(i.b)("li",{parentName:"ul"},"Supports a ",Object(i.b)("inlineCode",{parentName:"li"},"-")," nose, by injecting between the eyes and mouth."),Object(i.b)("li",{parentName:"ul"},"Supports both uppercase and lowercase variants.")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"import { generateEmoticonPermutations } from 'emojibase';\n\ngenerateEmoticonPermutations(':)'); // =-), =-}, :-], =-], :-}, :-), =}, =], =), :}, :], :)\n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"The base emoticon must follow a set of ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/emoticons"}),"naming guidelines")," to work properly.")),Object(i.b)("p",null,"Furthermore, this function accepts an options object as the 2nd argument, as a means to customize\nthe output."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"isFace")," (bool) - Toggles face permutations (mouth and eye variants). Defaults to ",Object(i.b)("inlineCode",{parentName:"li"},"true"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"withNose")," (bool) - Toggles nose inclusion. Defaults to ",Object(i.b)("inlineCode",{parentName:"li"},"true"),".")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"generateEmoticonPermutations(':)', { withNose: false }); // =}, =], =), :}, :], :)\ngenerateEmoticonPermutations('\\\\m/', { isFace: false }); // \\m/, \\M/\n")),Object(i.b)("h2",{id:"joinshortcodestoemoji"},Object(i.b)("inlineCode",{parentName:"h2"},"joinShortcodesToEmoji")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"joinShortcodesToEmoji<T extends Emoji | CompactEmoji",">","(emoji: T, shortcodeDatasets:\nShortcodesDataset[]): T")),Object(i.b)("p",null,"Will join shortcodes from multiple shortcode datasets into a single emoji object using its hexcode.\nWill remove duplicates in the process."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"import { joinShortcodesToEmoji } from 'emojibase';\n\njoinShortcodesToEmoji(\n  {\n    annotation: 'information',\n    name: 'INFORMATION SOURCE',\n    hexcode: '2139',\n    tags: ['i'],\n    emoji: '\u2139\ufe0f',\n    // ...\n  },\n  [\n    { '2139': 'information' /* ... */ },\n    { '2139': 'info' /* ... */ },\n    { '2139': 'info_source' /* ... */ },\n    { '2139': 'info' /* ... */ },\n  ],\n);\n\n/*\n{\n  annotation: 'information',\n  name: 'INFORMATION SOURCE',\n  hexcode: '2139',\n  tags: ['i'],\n  emoji: '\u2139\ufe0f',\n  shortcodes: ['information', 'info', 'info_source'],\n  // ...\n}\n*/\n")),Object(i.b)("h2",{id:"joinshortcodes"},Object(i.b)("inlineCode",{parentName:"h2"},"joinShortcodes")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"joinShortcodes<T extends Emoji | CompactEmoji",">","(emojis: T[], shortcodeDatasets:\nShortcodesDataset[]): T[]")),Object(i.b)("p",null,"Like ",Object(i.b)("inlineCode",{parentName:"p"},"joinShortcodesToEmoji")," but joins shortcodes to a list of emoji objects."),Object(i.b)("h2",{id:"striphexcode"},Object(i.b)("inlineCode",{parentName:"h2"},"stripHexcode")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"stripHexcode(hexcode: Hexcode): Hexcode")),Object(i.b)("p",null,"This function will strip zero width joiners (",Object(i.b)("inlineCode",{parentName:"p"},"200D"),") and variation selectors (",Object(i.b)("inlineCode",{parentName:"p"},"FE0E"),", ",Object(i.b)("inlineCode",{parentName:"p"},"FE0F"),") from a\nhexadecimal codepoint."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"import { stripHexcode } from 'emojibase';\n\nstripHexcode('1F468-200D-2695-FE0F'); // 1F468-2695\n")))}p.isMDXComponent=!0},78:function(e,t,o){"use strict";o.d(t,"a",(function(){return d})),o.d(t,"b",(function(){return u}));var n=o(0),a=o.n(n);function i(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function c(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function r(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?c(Object(o),!0).forEach((function(t){i(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):c(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,n,a=function(e,t){if(null==e)return{};var o,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||(a[o]=e[o]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var s=a.a.createContext({}),b=function(e){var t=a.a.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):r(r({},t),e)),o},d=function(e){var t=b(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var o=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=b(o),m=n,u=d["".concat(c,".").concat(m)]||d[m]||p[m]||i;return o?a.a.createElement(u,r(r({ref:t},s),{},{components:o})):a.a.createElement(u,r({ref:t},s))}));function u(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=o.length,c=new Array(i);c[0]=m;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:n,c[1]=r;for(var s=2;s<i;s++)c[s]=o[s];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,o)}m.displayName="MDXCreateElement"},80:function(e,t,o){"use strict";function n(e){var t,o,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(o=n(e[t]))&&(a&&(a+=" "),a+=o);else for(t in e)e[t]&&(a&&(a+=" "),a+=t);return a}t.a=function(){for(var e,t,o=0,a="";o<arguments.length;)(e=arguments[o++])&&(t=n(e))&&(a&&(a+=" "),a+=t);return a}},81:function(e,t,o){"use strict";var n=o(0);const a=Object(n.createContext)(void 0);t.a=a},82:function(e,t,o){"use strict";var n=o(0),a=o(81);t.a=function(){const e=Object(n.useContext)(a.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},86:function(e,t,o){"use strict";var n=o(0),a=o.n(n),i=o(82),c=o(80),r=o(47),l=o.n(r);const s=37,b=39;t.a=function(e){const{block:t,children:o,defaultValue:r,values:d,groupId:p}=e,{tabGroupChoices:m,setTabGroupChoices:u}=Object(i.a)(),[j,h]=Object(n.useState)(r),[f,O]=Object(n.useState)(!1);if(null!=p){const e=m[p];null!=e&&e!==j&&d.some(t=>t.value===e)&&h(e)}const N=e=>{h(e),null!=p&&u(p,e)},g=[],C=e=>{e.metaKey||e.altKey||e.ctrlKey||O(!0)},v=()=>{O(!1)};return Object(n.useEffect)(()=>{window.addEventListener("keydown",C),window.addEventListener("mousedown",v)},[]),a.a.createElement("div",null,a.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(c.a)("tabs",{"tabs--block":t})},d.map(({value:e,label:t})=>a.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":j===e,className:Object(c.a)("tabs__item",l.a.tabItem,{"tabs__item--active":j===e}),style:f?{}:{outline:"none"},key:e,ref:e=>g.push(e),onKeyDown:e=>{((e,t,o)=>{switch(o.keyCode){case b:((e,t)=>{const o=e.indexOf(t)+1;e[o]?e[o].focus():e[0].focus()})(e,t);break;case s:((e,t)=>{const o=e.indexOf(t)-1;e[o]?e[o].focus():e[e.length-1].focus()})(e,t)}})(g,e.target,e),C(e)},onFocus:()=>N(e),onClick:()=>{N(e),O(!1)},onPointerDown:()=>O(!1)},t))),a.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},n.Children.toArray(o).filter(e=>e.props.value===j)[0]))}},87:function(e,t,o){"use strict";var n=o(0),a=o.n(n);t.a=function(e){return a.a.createElement("div",null,e.children)}}}]);